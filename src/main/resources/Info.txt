
 Spring Boot의 로직 
 
 client  ==dto====> Controller ==dto====> Service ===dto===> Repository===> Entity ====> DB 
		     					(비즈니스 로직)              (DAO, DB를 직접접근)
		     					
@Autowired  : 객체를 Spring Container에서 생성해서 주입 ( DI : 의존성 주입  ) 
	-- Test 코드에서 사용. 동인한 타입을 찾아서 객체를 생성 
	
//H2 DB는 멀티 작동이 안됨 
   // H2 에 Test 코드에서 값을 넣을때는 서비스가 중지 되어 있어야 한다. 
   
  
  
  JPA 사용 
  1. 라이브러리 등록
  	implementation 'org.springframework.boot:spring-boot-starter-data-jpa
  2. JPA 설정 
  	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
	spring.jpa.hibernate.ddl-auto=update  
	
  3. Entity 클래스 생성 
  4. Repository 생성 <인터페이스>  : JpaRepository<Question, Integer> 를 상속 해서 생성 
  		findAll()  :  테이블의 전체 레코드를 검색 : select * from question 
  		findId(1)   :  레코드 하나				: select * from question where id = 1
  		save() :	insert, update 
  		delete() :    delete 
  		count() : 	<Question 테이블의 레코드의 총 갯수 > 
  		
  		
 //Spring Boot : MVC 개발 하는 로직 
  
 client =====> Controller =====>Service =====> Repository ===> Entity ===> DB Table  		
  	
   Service Layer 를 두는 이유 : 
      - 반복된 코드를 줄여줄 수 있음. 
      - 보안 	
      
   * Controller 에서 직접 Repository 를 접근 하지 않는다. 중복된 코드가 반복 될수 있다. 
   		
 Spring IoC 컨테이너에 Bean(객체) 생성하는 어노테이션 
   - Spring 에서는 객체를 생성해서 컨테이너에 로드 
   - 클래스 상단에 설정 
   	- @Component   : 일반적인 객체를 Bean에 등록  
   	- @Controller  : Controller class	: 1. 클라이언트요청 , 2. service (비즈니스로직처리), 3. view
   	- @Service 	   : Service class		: 비즈니스 로직을 처리 , Repository 에 일을 처리 
   	- @Repository  : Repository class   : DB의 CRUD 메소드 
  
 DI (의존성 주입) : IoC 컨테이너에 생성된 객체를 변수에 주입 
   - @Autowired    : 타입을 검색해서 컨테이너에 객체를 주입 , 비슷한 타입의 구현한 객체가 여러개인 경우 문제가 발생  
   		//@Test : 테이스 할때 사용 
   - 생성자를 이용한 주입 : (권장 사항)    <=== @RequiredArgsConstructor ( 클래스 위에 할당 ) 
   		private final QuestionRepository questionRepository ; 
   				 
   - Setter를 이용한 주입 
   
 ===============================================
 src/main/resources 
   - templates : thymeleaf  뷰 페이지가 위치 , *.html 
   - static : 외부의 css, 외부의 javascript 가 위치 해야 하는 곳 , bootstrap 의 파일. css , js
   
 
 
 form 에 변수에 들어오는 값을 체크 : 유효성 체크 ( 빈값, 메일주소형식, 숫자) 
   - 1. 라이브러리가 등록    : implementation 'org.springframework.boot:spring-boot-starter-validation'
   - 2. QuestionForm : dto 
   
   		@NotEmpty(message="제목을 필수 항목입니다.") 필드 위에 유효성 확인 어노테이션 적용 
   		@Size(max=200)
		private String subject;
   - 3. Controller 
   		 메소드 내부에 (@Valid QuestionForm questionForm, BindingResult bindingResult) 
   
   ==============================================================
   
   Paging 처리 
     - JPA 라이브러리 등록 , JPA에 등록된 객체가 자동으로 페이징 처리를 아주 쉽게 한다. 
     
      org.springframework.data.domain.Page 
      org.springframework.data.domain.PageRequest
      org.springframework.data.domain.Pageable  			<== 
      
      -- 레파지토리에서 설정 ( pageable : 요청한 페이지 번호, 레코드갯수)
      Page<Question> findAll(Pageable pageable);  
     
   	  -- 서비스에서 컨트롤러로부터 클라이언트가 요청한 페이지번호를 받아서 pageable 객체에 할당, 레코드 수 할당. 
   	  
  =================================
  인증 ( Authentication ) :  ID (IDentity) + Password 를 확인 하는 작업  
  허가 ( Authorization ) :  인증된 사용자에게 권한을 부여하는 작업 
  		-- Admin 
  		-- User
  		
  		sec:Authorize = "isAnonymous()"  : 로그인 되지 않는 상태 (true)
  		sec:Authorize = "isAuthenticated() : 로그인된 상태 (true) 
  		
 ===========================================================
 @ManytoOne     : FetchType.EAGER
 @OnetoOne		: FetchType.EAGER
 @OnetoMany     : FetchType.LAZY
 @ManytoMany    : FetchType.LAZY
 
 즉시 로딩 : FetchType.EAGER		<== RAM 을 많이 차지하고 부하가 많이 걸림
 	
 지연 로딩 : FetchType.LAZY        <== 지연로딩을 권장, 요청이 있을때 로딩 해서 적용  
   
 사용법 : 
 	@ManyToMany (fetch = FetchType.LAZY)   
   
 ========================================================
 검색 기능 쿼리 
 // 검색어 : 스프링 
// Question : subject , content 에서 검색 
select * from question where subject like '%스프링%' or content like '%스프링%'

// Answer : content 
select * from answer where content like '%스프링%'

//Site_user : username 
select * from site_user where username like '%스프링%'

=========================================================
Question , Answer, SiteUser 에서 한꺼번에 검색을 적용 :  Left Outer JOIN 을 사용해서 한번에 

select  distinct * 
from question q 
        LEFT OUTER JOIN Site_User u1 
	      ON q.author_id = u1.id 
        LEFT OUTER JOIN answer a 
	      ON q.id = a.question_id
        LEFT OUTER JOIN Site_User u2
              ON a.author_id = u2.id

where q.subject like '%스프링%' 
      or q.content like '%스프링%' 
      or u1.username like '%스프링%'
	  or a.content like '%스프링%'
	  or u2.username like '%스프링%'
	  
============주의 : 테이블 명이 아니라 메소드 명으로 매핑 =======================================
	
	@Query("select  distinct q "
			+ " from Question q "
			+ "        LEFT OUTER JOIN SiteUser u1 "
			+ "	      ON q.author = u1 "
			+ "        LEFT OUTER JOIN Answer a "
			+ "	      ON a.question = q "
			+ "        LEFT OUTER JOIN SiteUser u2 "
			+ "              ON a.author = u2 "
			+ " where q.subject like %:kw% "
			+ "      or q.content like %:kw% "
			+ "      or u1.username like %:kw% "
			+ "      or a.content like %:kw% "
			+ "      or u2.username like %:kw% ")
	Page<Question> findAllByKeyword(@Param("kw") String kw , Pageable pageable); 
 
 